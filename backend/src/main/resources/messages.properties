
#UserService
userService.save.ok = Usuario creado correctamente.
userService.update.ok = Usuario actualizado correctamente.
userService.getById.error.user = Usuario no encontrado.
userService.getById.error.log =  [Mensaje: Usuario con Id {0} No encontrado.] - [Clase: {1}] - [Método: {2}].
userService.requestResetPassword.success =Solicitud de restablecimiento de contraseña procesada. Por favor, revisa tu correo electrónico.
userService.resetPassword.success = Se ha restablecido la contraseña exitosamente.
userService.resetPassword.asunto = Restablecimiento de Contraseña
userService.dominio = https://tu-dominio.com/reset-password
userService.requestResetPassword.mensaje = Para restablecer tu contraseña, haz clic en el siguiente enlace: {0}  IMPORTANTE!- SI USTED NO SOLICITÓ RESTABLECERLA, COMUNIQUESE CON EL ÁREA DE SOPORTE DE MANERA INMEDIATA - .
userService.requestResetPassword.asunto = Solicitud de Restablecimiento de Contraseña.
userService.getByUsername.error.user =  Usuario no encontrado.
userService.getByUsername.error.log = [Mensaje: Usuario con Id o Username {0} No encontrado.] - [Clase: {1}] - [Método: {2}].
userService.getAll.ok.user =  Listado recuperado.
userService.getAll.empty.user = No se encontraron datos.
userService.systemLogService.create = Se creó usuario [ID: {0}] - [Username: {1}].
userService.systemLogService.update = Se actualizó usuario [ID: {0}] - [Username: {1}].



#UserDetailServiceImpl
userDetailServiceImpl.refreshToken.invalidCode = Código Inválido.
userDetailServiceImpl.refreshToken.refreshTokenExpired = Refresh Token Expirado.
userDetailServiceImpl.refreshToken.ok = Refresh Token actualizado y jwt creado.
userDetailServiceImpl.logout.ok = Sesión cerrada correctamente.
userDetailServiceImpl.systemLogService.login = Inicio de sesión del usuario [ID: {0}] - [Username: {1}]
userDetailServiceImpl.systemLogService.logout = Cierre de sesión del usuario [ID: {0}] - [Username: {1}]

#RoleService
roleService.save.ok = Rol creado correctamente. Recuerde que los usuarios afectados deberán volver a loguearse en la aplicación para ver los cambios de seguridad.
roleService.update.ok = Rol actualizado correctamente. Recuerde que los usuarios afectados deberán volver a loguearse en la aplicación para ver los cambios de seguridad.
roleService.getAll.user.ok = Roles encontrado correctamente.
roleService.getById.user.ok = Rol encontrado correctamente.
roleService.systemLogService.create = Se creó el rol {0}.
roleService.systemLogService.update = Se actualizó el rol {0}.


#PermissionService
permissionService.getAll.ok = Permisos recuperados correctamente.
permissionService.getById.ok = Permiso encontrado correctamente.


#PersonService
personService.saveAvatar.user.ok = foto de perfil actualizada con éxito.
personService.deleteAvatar.user.ok = foto de perfil eliminada con éxito.


#GlobalException
exception.jwtUtils.validateToken.error.user = Token de restablecimiento de contraseña no válido o expirado.
exception.jwtUtils.validateToken.error.log = [Detalle: Token de restablecimiento de contraseña no válido o expirado.] - [Clase: {0}]-[Método: {1}]
exception.passwordNotEquals.user = Las password deber coincidir.
exception.passwordNotEquals.log = [Detalle: No coinciden las passwords en el login] - [Usuario: {0}] -[Clase: {1}]-[Método: {2}]
exception.database.log = Error al acceder a la base de datos: [Clase: {0}] - [Id Objeto {1}] -  [Nombre o valor representativo del objeto:{2}] - [Método:{3}] - [Causa Raíz: {4}] - [Mensaje al usuario:{5}]
exception.database.user = Ocurrió un error al procesar la solicitud en la base de datos. Por favor, intente nuevamente más tarde.
exception.validation.log = Validación error [Campo: {0}] - [Mensaje: {1}] - [Usuario: - {2}].
exception.generic=Ha ocurrido un error inesperado. Por favor, inténtalo de nuevo más tarde.
exception.notFound = La URL que has solicitado no existe. Por favor verifica y volvé a intentarlo.
exception.authenticationRequired.log = Usuario no autenticado [Detalle : {0}] - [URL: {1}] -[Clase: {2}] - [Método: {3}]. 
exception.authenticationRequired.user = Debes autenticarte primero antes de ingresar a esta página.
exception.accessDenied.log=No tiene permiso para acceder a este recurso [Usuario : {0}] - [URL: {1}] - [Mensaje: {2}].
exception.accessDenied.user= Ups! No tenés permiso para acceder a esta sección. Si creés que se trata de un error, comunicate con el administrador de la aplicación.
exception.validateToken.log = Token inválido o expirado [JWT : {0}] - [URL: {1}] -[Clase: {2}] - [Método: {3}].
exception.validateToken.user = Token inválido o expirado.
exception.badCredentials.log = Intento de inicio de sesión fallido - [Username:{0}] - [Clase: {1}] - [Método: {2}].
exception.badCredentials.user = Usuario o contraseña incorrecta.
exception.usernameExisting.log = [Mensaje: Usuario {0} ya se encuentra registrado.]- [Clase: {1}] - [Método: {2}].
exception.usernameExisting.user = El Usuario {0} ya se encuentra registrado.
exception.usernameNotFound.log = [Usuario {0} inexistente o dado de baja.] - [Clase: {1}] - [Método: {2}].
exception.usernameNotFound.user = Usuario inexistente.
exception.blockAccount.log = Cuenta Bloqueada: [ID User:{0} - [Username:{1}] - [Clase: {2}] - [Método: {3}].
exception.blockAccount.user = Su cuenta se encuentra bloqueada. Por favor, restablezca la password para ingresar.
exception.roleNotFoundUserCreationException.user = No se pudo crear el usuario. No se encontró el Rol.
exception.roleNotFoundUserCreationException.log = [Mensaje: Usuario NO CREADO - Rol con ID {0} No encontrado.] [Clase: {1}] - [Método: {2}].
exception.roleNotFound.user = Rol no encontrado.
exception.roleNotFound.log = [Mensaje: Rol {0} no encontrado.] - [Clase: {1}] - [Método: {2}].
exception.roleExisting.user = El Rol {0} ya se encuentra registrado.
exception.roleExisting.log = [Mensaje: Rol {0} ya se encuentra registrado.] - [Clase: {1}] - [Método: {2}].
exception.permissionNotFound.user = Permiso no encontrado.
exception.permissionNotFound.log = [Mensaje: Permiso ID {0} No encontrado.]- [Clase: {1}] - [Método: {2}].
exception.actionNotfound.user = Acción no encontrada.
exception.actionNotfound.log =  [Mensaje: Acción ID {0} No encontrada.]- [Clase: {1}] - [Método: {2}].
exception.messageNotFound.user = Id del Mensaje no encontrado.
exception.messageNotFound.log =  [Detalle: Mensaje ID {0} No encontrado.] - [Clase:{1}] - [Método: {2}].

exception.update.validateNotDevRole.log = [Detalle: No puede actualizarse al usuario con ID {0} al Rol de tipo DEV.] - [Clase: {1}] - [Método: {2}].
exception.update.validateNotDevRole.user = La actualización a un Rol de tipo -Desarrollador- no está permitida.

exception.save.validateNotDevRole.log = [Detalle: No puede crearse un usuario con ID {0} al Rol de tipo DEV.] - [Clase: {1}] - [Método: {2}].
exception.save.validateNotDevRole.user = La creación de usuario con un Rol de tipo -Desarrollador- no está permitida.

exception.validateUpdateUser.log = [Detalle: Usuario ID {0} - El valor a actualizar es igual al que ya cuenta.] [Clase: {1}] - [Método: {2}]
exception.validateUpdateUser.user = El valor proporcionado es igual al actual, no se realizaron cambios.

exception.tokenConfigNotFoundException.log = No se encuentra registro en la base de datos para actualizar el valor [Clase: {0}] - [Método: {1}]
exception.tokenConfigNotFoundException.user = No se encuentra registro en la base de datos para actualizar el valor.
exception.refreshTokenConfigNotFoundException.log =[Detalle: No se encuentra registro en la base de datos para actualizar o recuperar el valor] - [Clase: {0}] - [Método: {1}]
exception.refreshTokenConfigNotFoundException.user = No se encuentra registro en la base de datos para actualizar o recuperar el valor.
exception.refreshToken.log = Refresh Token no encontrado, inválido o expirado. [IdUser: {0}] - [Clase:{1}] - [Método: {2}].

exception.personExists.user = La persona ya se encuentra registrada.
exception.personExists.log = [Detalle: Persona con:{0}-{1} ya se encuentra registrada] - [Clase: {2}] - [Método: {3}].
exception.personNotFound.user= Persona inexistente o deshabilitada.
exception.personNotFound.log = [Detalle: Persona con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]
exception.dniTypeNotFound.user = Tipo de DNI inexistente o deshabilitado.
exception.dniTypeNotFound.log = [Detalle: TipoDNI con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]
exception.genderNotFound.user= Género inexistente o deshabilitado.
exception.genderNotFound.log = [Detalle: Género con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]
exception.nationalityNotFound.user= Nacionalidad inexistente o deshabilitado.
exception.nationalityNotFound.log = [Detalle: Nacionalidad con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]
exception.localityNotFound.user= Localidad inexistente o deshabilitado.
exception.localityNotFound.log = [Detalle: Localidad con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]
exception.healthPlanNotFound.user= Prepaga inexistente o deshabilitado.
exception.healthPlanNotFound.log = [Detalle: Prepaga con ID:{0} inexistente o deshabilitado] - [Clase: {1}] - [Método: {2}]
exception.phoneTypeNotFound.user = Tipo teléfono inexistente o deshabilitado.
exception.phoneTypeNotFound.log = [Detalle: Tipo Teléfono con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]
exception.patientNotFound.user = Paciente no encontrado.
exception.patientNotFound.log = [Detalle: Paciente ID:{0} - No encontrado] - [Clase: {1}] - [Método: {2}].

exception.affiliateNumber.user = El N°de afiliado ya se encuentra registrado para otro paciente.
exception.affiliateNumber.log = [Detalle: El N°de afiliado {0} ya se encuentra registrado en otro paciente. [Clase: {1}] - [Método: {2}].

exception.licenseNumber.user = El N°de licencía médica ya se encuentra registrado para otro profesional.
exception.licenseNumber.log = [Detalle: El N°de licencía médica {0} ya se encuentra registrada en otro profesional. [Clase: {1}] - [Método: {2}].

exception.dentistSpecialtyNotFound.user = Especialidad médica inexistente o deshabilitada.
exception.dentistSpecialtyNotFound.log = [Detalle: Especialidad médica con ID:{0} inexistente o deshabilitada] - [Clase: {1}] - [Método: {2}]

exception.file.conflictExtensionImage.user = No se pudo subir la imágen. Solo se admiten extensiones .jpg, .jpeg o .png.
exception.file.conflictExtensionImage.log = [Detalle: Error al actualizar avatar. Extensión no permitida. Nombre Archivo:{0}] - [Clase: {1}] - [Método: {2}]

exception.file.conflictExtensionDocument.user = No se pudo subir la imágen. Solo se admiten extensiones .pdf, o .docx.
exception.file.conflictExtensionDocument.log = [Detalle: Error al actualizar avatar. Nombre URL:{0}] - [Clase: {1}] - [Método: {2}]


exception.file.attachedFileNotFound.user = Documento inexistente o deshabilitado.
exception.file.attachedFilesNotFound.log = [Detalle: Documento con ID:{0} inexistente o deshabilitado] -  [Clase: {1}] - [Método: {2}]

exception.file.tooLarge.user= El archivo excede el tamaño máximo permitido. Solo se admiten un máximo de 5 MB.
exception.file.tooLarge.log =[Detalle: El archivo excede el tamaño máximo permitido. Nombre Archivo:{0}] - [Clase: {1}] - [Método: {2}]

exception.systemParameterService.notFound.user = Parámetro no encontrado.
exception.systemParameterService.notFound.log = [Detalle: Parámetro no encontrado [ID :{0}] - [Clase: {1}] - [Método: {2}]





##Validación genérica DTO
generic.id.empty = El ID no puede ser nulo.

#UserSecCreateDTO
userSecCreateDTO.username.empty = El username no puede estar vacío.
userSecCreateDTO.username.email = El username debe ser un correo válido.
userSecCreateDTO.password.empty = La password no puede estar vacía.
userSecCreateDTO.password.min = La password debe contener al menor 10 carácteres.
userSecCreateDTO.password.pattern = La password debe contener al menos un carácter especial, una mayúscula y un número.
userSecCreateDTO.role.empty = El usuario debe asignarse al menos 1 Rol.


#RoleRequestDTO
roleDTO.role.empty = El nombre del rol no puede estar vacío.
roleDTO.permission.empty = El rol debe contar con al menos un permiso.


#PermissionRequestDTO
permissionDTO.name.empty = El nombre del permiso no puede estar vacío.


#RefreshToken DTO
refreshTokenRequestDTO.refreshEmpty = El campo RefreshToken está vacío.
refreshTokenRequestDTO.userIdEmpty = El ID del usuario no puede ser nulo.
refreshTokenRequestDTO.usernameEmpty = El username no puede ser nulo.



#RefreshTokenService
refreshTokenService.deleteRefreshToken = No se puede eliminar el Refresh Token.

#Config
config.getMessage.ok = Listado de configuraciones correcto.
config.updateMessage.ok = Actualización correcta.
config.updateSchedule.ok = Se actualizó la expresión cron al siguiente formato  {0}.
config.update.ok = Parámetro actualizado correctamente.
config.systemLogService.updateSchedule = Parametrización actualizada [Tarea ID: {0}] - [Clase: {1}] - [Método: {2}]


#GeoService
geoService.validateCountry.notFound.user = No se encontraron provincias relacionadas con el País seleccionado.
geoService.validateCountry.notFound.log = [Mensaje: No existe o está deshabilitado el pais con ID {0}] - [Clase: {1}] - [Método: {2}].
geoService.validateProvince.notFound.user = No se encontraron localidades relacionadas con la Provincia seleccionada.
geoService.validateProvince.notFound.log = [Mensaje: No existe o está deshabilitado la Provincia con ID {0}] - [Clase: {1}] - [Método: {2}].

#ContactEmail
contactEmail.formatError.user = El email debe ser un formato tipo email@example.com.
contactEmail.empty.user = El mail no puede estar vacío.


#PersonCreateRequestDTO
personCreateRequestDTO.firstName.Empty = El nombre no puede estar vacío.
personCreateRequestDTO.lastName.Empty = El apellido no puede estar vacío.
personCreateRequestDTO.dniTypeId.Empty = El tipo de DNI no puede estar vacío.
personCreateRequestDTO.dni.Empty = El DNI no puede estar vacío.
personCreateRequestDTO.birthDate.Empty = La fecha de nacimiento no puede estar vacía.
personCreateRequestDTO.genderId.Empty = El género no puede estar vacío.
personCreateRequestDTO.nationalityId.Empty = La nacionalidad no puede estar vacía.
personCreateRequestDTO.email.Invalid = El email debe tener un formato correcto.
personCreateRequestDTO.email.Empty = El email no puede estar vacío.


#DentistCreateRequestDTO
dentistCreateRequestDTO.licenseNumber.Empty = El número de licencia no puede estar vacío.
dentistCreateRequestDTO.dentistSpecialtyId.Empty = Debe seleccionar la especialidad del profesional.


#AddressRequestDTO
addressRequestDTO.localityId.Empty = La localidad no puede estar vacía.
addressRequestDTO.street.Empty = El campo "calle" no puede estar vacío.
addressRequestDTO.number.Empty = La altura del domicilio no puede estar vacía.

#ContactPhoneRequestDTO
contactPhoneRequestDTO.phoneType.Empty = El "Tipo teléfono" no puede estar vacío.
contactPhoneRequestDTO.phone.Empty = El teléfono no puede estar vacío.

#UserSecUpdateDTO
userSecUpdateDTO.enabled.Empty = Se debe proporcionar un valor para el estado del usuario.
userSecUpdateDTO.rolesList.Empty = El usuario debe poseer al menos un rol.


#AttachedFileConfigDTO
#PatientService
patientService.save.ok.user = Paciente creado correctamente.
patientService.update.ok.user = Paciente actualizado correctamente.

#PatientMedicalRiskController
patientMedicalRiskController.createOrUpdate.user.ok = Riesgos médicos actualizados correctamente.


#AttachedFilesService
attachedFileService.saveDocument.ok.user = Documento subido correctamente.
attachedFileService.disabledDocument.ok.user = Documento eliminado correctamente.
attachedFileService.systemLogService.disabledByIdDocumentUser = Se eliminó documento de usuario [ID documento: {0}]
attachedFileService.systemLogService.disabledByIdDocumentPatient = Se eliminó documento de paciente [ID documento: {0}]



#ScheduleService
scheduleService.getByKeyName.ok = Expresión cron obtenida correctamente. [Tarea: {0}] -  [Cron: {1}]
scheduleService.getByKeyName.error = Expresión cron NO obtenida. Se devuelve una por defecto. [Tarea: {0}] -  [Cron: {1}]


#AddressServices
addressService.systemLogService.deleteOrphan = Finaliza tarea programada [Tarea: CLEAN_ORPHAN_ADDRESS] - [Ejecución: {0} segundos] - [Mensaje: {1}] - [Total obtenidos: {2}]- [Total Eliminados: {3}]

#ContactEmailServices
contactEmailService.systemLogService.deleteOrphan = Finaliza tarea programada [Tarea: CLEAN_ORPHAN_EMAIL] - [Ejecución: {0} segundos] - [Mensaje: {1}] - [Total obtenidos: {2}]- [Total Eliminados: {3}]

#ContactPhoneServices
contactPhoneService.systemLogService.deleteOrphan = Finaliza tarea programada [Tarea: CLEAN_ORPHAN_PHONE] - [Ejecución: {0} segundos] - [Mensaje: {1}] - [Total obtenidos: {2}]- [Total Eliminados: {3}]

#AttachedFileServices
attachedFilesService.systemLogService.deleteAttachedFiles = Finaliza tarea programada [Tarea: CLEAN_ATTACHED_FILE_DISABLED] - [Ejecución: {0} segundos] - [Mensaje: {1}] - [Total obtenidos: {2}]- [Total Eliminados: {3}]
attachedFilesService.systemLogService.saveDocumentUser = Se subió documento adjunto para usuario [ID User:{0}] - [Nombre Archivo: {1}]
attachedFilesService.systemLogService.saveDocumentPatient = Se subió documento adjunto para paciente [ID Patient:{0}] - [Nombre Archivo: {1}]

#SystemLogServices
systemLogService.systemLogService.delete = Finaliza tarea programada [Tarea: CLEAN_LOGS] - [Ejecución: {0} segundos] - [Mensaje: {1}] - [Total Eliminados: {2}]

#EmailService
emailService.systemLogService.sendEmail = Se envío email a {0} - [Asunto {1}] - [Mensaje: {2}]