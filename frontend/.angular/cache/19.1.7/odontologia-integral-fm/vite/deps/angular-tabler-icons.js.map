{
  "version": 3,
  "sources": ["../../../../../../node_modules/angular-tabler-icons/fesm2022/angular-tabler-icons.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, input, linkedSignal, effect, untracked, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nconst _c0 = [\"*\"];\nconst OPTIONS_TOKEN = new InjectionToken('OPTIONS_TOKEN');\nclass OptionsProvider {\n  constructor(options) {\n    this.options = options;\n  }\n}\n\n/**\n * Converts a given string to UpperCamelCase (PascalCase).\n *\n * This function transforms the input string by:\n * 1. Converting the entire string to lowercase.\n * 2. Capitalizing the first letter of each word or uppercase letter.\n * 3. Removing any hyphens or underscores.\n *\n * @example\n * ```ts\n *  upperCamelCase('foo-bar'); // FooBar\n * ```\n *\n * @param str - The input string to be converted.\n * @returns The transformed string in UpperCamelCase format.\n */\nfunction upperCamelCase(str) {\n  return str.toLowerCase().replace(/(?:^\\w|[A-Z]|\\b\\w)/g, firstLetter => {\n    return firstLetter.toUpperCase();\n  }).replace(/[-_]/g, '');\n}\n\n/**\n * A component that renders Tabler icons as SVG elements.\n *\n * This component takes an icon name as input and renders the corresponding SVG icon\n * by injecting it into the DOM. It supports multiple icon sets through an options token\n * and provides warnings when icons are not found.\n *\n * @example\n * ```html\n * <tabler-icon name=\"user\"></tabler-icon>\n * ```\n *\n * @remarks\n * The component uses Angular's dependency injection to get ElementRef and options.\n * Icons are rendered using innerHTML after being retrieved from the configured icon sets.\n * Warning messages are logged to the console when icons are not found (unless warnings are ignored in options).\n */\nclass TablerIconComponent {\n  constructor() {\n    this.#elem = inject(ElementRef);\n    this.#options = inject(OPTIONS_TOKEN);\n    /**\n     * Icon name in kebab-case format.\n     * @example\n     * - \"user\"\n     * - \"heart-filled\"\n     * - \"camera-off\"\n     * - \"brand-github\"\n     * etc\n     */\n    this.name = input.required();\n    this.#svg = linkedSignal(() => this.#getSvgIcon(this.name()));\n    this.setNativeSvg = effect(() => {\n      const svg = this.#svg();\n      if (!svg) {\n        return;\n      }\n      // Set innerHTML to render SVG\n      untracked(() => {\n        this.#elem.nativeElement.innerHTML = svg;\n      });\n    });\n  }\n  #elem;\n  #options;\n  #svg;\n  /**\n   * Retrieves the SVG markup for a given icon name from the configured icon sets.\n   *\n   * @param iconName - The name of the icon to retrieve in kebab-case format\n   * @returns The SVG markup string for the icon, or an empty string if not found\n   *\n   * @remarks\n   * This method:\n   * - Merges all icon sets from the configured options\n   * - Converts the icon name to upper camel case and prepends \"Icon\"\n   * - Returns empty string if icon name is undefined\n   * - Logs a warning if icon is not found (unless warnings are ignored in options)\n   */\n  #getSvgIcon(iconName) {\n    // Merge all icon sets from options\n    const icons = Object.assign({}, ...this.#options.map(option => option.icons));\n    if (!iconName) {\n      return '';\n    }\n    const icon = `Icon${upperCamelCase(iconName)}`;\n    // Use optional chaining and nullish coalescing for safer property access\n    const svg = icons?.[icon] ?? '';\n    if (!svg && !this.#options.some(option => option.ignoreWarnings)) {\n      console.warn(`Tabler Icon not found: ${iconName}\\n\n         Refer to documentation on https://github.com/pierreavn/angular-tabler-icons`);\n    }\n    return svg;\n  }\n  static {\n    this.ɵfac = function TablerIconComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TablerIconComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: TablerIconComponent,\n      selectors: [[\"i-tabler\"], [\"tabler-icon\"]],\n      inputs: {\n        name: [1, \"name\"]\n      },\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function TablerIconComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TablerIconComponent, [{\n    type: Component,\n    args: [{\n      selector: 'i-tabler, tabler-icon',\n      template: `<ng-content />`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\":host{display:inline-block;width:24px;height:24px;fill:none;stroke:currentColor;stroke-width:2px;stroke-linecap:round;stroke-linejoin:round}\\n\"]\n    }]\n  }], null, null);\n})();\n\n/**\n * @deprecated\n *\n */\nclass TablerIconsModule {\n  constructor() {\n    this.options = inject(OPTIONS_TOKEN, {\n      optional: true\n    });\n    if (!this.options) {\n      throw new Error(`No icon provided. Make sure to use 'TablerIconsModule.pick({ ... })' when importing the module\\n` + `Refer to documentation on https://github.com/pierreavn/angular-tabler-icons`);\n    }\n  }\n  /**\n   * Initialize module with given icons and options\n   * @param icons\n   * @returns Module with options\n   */\n  static pick(icons, options) {\n    return {\n      ngModule: TablerIconsModule,\n      providers: [{\n        provide: OPTIONS_TOKEN,\n        useValue: {\n          icons,\n          ...options\n        },\n        multi: true\n      }]\n    };\n  }\n  static {\n    this.ɵfac = function TablerIconsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TablerIconsModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: TablerIconsModule,\n      imports: [TablerIconComponent],\n      exports: [TablerIconComponent]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TablerIconsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [TablerIconComponent],\n      exports: [TablerIconComponent]\n    }]\n  }], () => [], null);\n})();\nfunction provideTablerIcons(icons, options) {\n  return [{\n    provide: OPTIONS_TOKEN,\n    useValue: {\n      icons,\n      ...options\n    },\n    multi: true\n  }];\n}\n\n/*\n * Public API Surface of angular-tabler-icons\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TablerIconComponent, TablerIconsModule, provideTablerIcons };\n"],
  "mappings": "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",
  "names": []
}
